{"version":3,"sources":["Services.js","Dog.js","App.js","index.js"],"names":["makeApiCall","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","wrap","_context","prev","next","abrupt","fetch","then","response","json","error","console","log","concat","stop","this","_x","apply","arguments","fetchBreeds","_ref2","_callee2","data","_context2","sent","mapDogs","message","entries","reduce","acc","value","breed","subBreeds","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","subBreed","push","err","return","fetchDogImage","_ref3","_callee3","_context3","_x2","_x3","fetchRandomText","_ref4","_callee4","_context4","Dog","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","image","props","text","setState","_this$props","react_default","createElement","data-testid","src","alt","style","width","height","Component","App","isLoaded","breeds","map","dog","Dog_Dog","key","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.d19f9005.chunk.js","sourcesContent":["const makeApiCall = async (url) => {\n    return fetch(url)\n        .then(response => response.json())\n        .then(\n            (response) => {\n                return response\n            },\n            (error) => {\n                console.log(`An error occurred while fetching data: ${error}`)\n            }\n        );\n};\n\nexport const fetchBreeds = async () => {\n    let data = await makeApiCall(\"https://dog.ceo/api/breeds/list/all\");\n    return mapDogs(data.message);\n};\n\nconst mapDogs = (response) => {\n    return Object.entries(response).reduce(function (acc, value) {\n        const breed = value[0];\n        const subBreeds = value[1];\n        if (subBreeds && subBreeds.length > 0) {\n            for (let subBreed of subBreeds) {\n                acc.push({breed, subBreed})\n            }\n        } else {\n            acc.push({breed});\n        }\n        return acc;\n    }, []);\n};\n\nexport const fetchDogImage = async (breed, subBreed) => {\n    const url = `https://dog.ceo/api/breed/${breed}/${subBreed != null ? subBreed + '/' : ''}images/random`;\n    return fetch(url)\n        .then(response => response.json())\n        .then(\n            (response) => {\n                return response.message\n            },\n            (error) => {\n                console.log(`An error occurred while fetching image: ${error}`)\n            }\n        );\n};\n\nexport const fetchRandomText = async () => {\n    return makeApiCall(\"https://baconipsum.com/api/?type=all-meat&sentences=1&start-with-lorem=1\");\n};","import React, {Component} from 'react';\nimport {fetchDogImage, fetchRandomText} from \"./Services\";\n\nexport default class Dog extends Component {\n    constructor() {\n        super();\n        this.state = {image: 'loader.gif'};\n    }\n\n    async componentDidMount() {\n        this.setState({\n            image: await fetchDogImage(this.props.breed, this.props.subBreed),\n            text: await fetchRandomText()\n        });\n    }\n\n    render() {\n        const {breed, subBreed} = this.props;\n        return (\n            <div>\n                <div>\n                    <span data-testid=\"breed\">{breed}</span>\n                    {subBreed &&\n                    <span data-testid=\"subBreed\"> - {subBreed}</span>\n                    }\n                </div>\n                <div>\n                    <img data-testid=\"image\" src={this.state.image} alt={'image of' + breed}\n                         style={{width: '100%', height: 'auto'}}/>\n                </div>\n                <div>\n                    <p data-testid=\"text\">{this.state.text}</p>\n                </div>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport Dog from \"./Dog\";\nimport {fetchBreeds} from \"./Services\";\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false\n        }\n    }\n/*\n    static mapDogs(response) {\n        return Object.entries(response).reduce(function (acc, value) {\n            const breed = value[0];\n            const subBreeds = value[1];\n            if (subBreeds && subBreeds.length > 0) {\n                for (let subBreed of subBreeds) {\n                    acc.push({breed, subBreed})\n                }\n            } else {\n                acc.push({breed});\n            }\n            return acc;\n        }, []);\n    }*/\n\n    async componentDidMount() {\n        let breeds = await fetchBreeds();\n        this.setState({\n            breeds: breeds,\n            isLoaded: true\n        })\n    }\n\n    render() {\n        if (!this.state.isLoaded) {\n            return (<p>Loading..</p>);\n        } else {\n            return <div style={{width: '200px'}}>\n                {this.state.breeds.map((dog) => {\n                    const {breed, subBreed} = dog;\n                    return <Dog\n                        key={dog.breed + '-' + dog.subBreed}\n                        breed={breed}\n                        subBreed={subBreed}\n                    />\n                })}\n            </div>\n        }\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}